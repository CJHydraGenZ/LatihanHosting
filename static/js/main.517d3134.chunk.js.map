{"version":3,"sources":["component/latihan3/Api.js","component/latihan3/Skeleton.js","component/latihan3/DEs.js","component/latihan3/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["API","a","axios","get","response","console","log","data","useStyles","makeStyles","root","width","margin","Animations","classes","className","Skeleton","animation","Des","useState","setData","loading","setLoading","useEffect","fetch","map","d","Grid","container","justify","spacing","key","id","item","xs","Paper","elevation","onClick","e","Card","style","minWidth","CardContent","Typography","fontSize","color","title","body","theme","flexGrow","menuButton","marginRight","ButtonAppBar","AppBar","position","Toolbar","IconButton","edge","aria-label","variant","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.517d3134.chunk.js","sourcesContent":["\r\nimport axios from 'axios'\r\n\r\nconst URL = 'https://jsonplaceholder.typicode.com/posts'\r\nexport const API = async () => {\r\n    try {\r\n        const response = await axios.get(`${URL}`)\r\n        // .then(response => response.json())\r\n        // .then(json => console.log(json))\r\n        console.log(response);\r\n        return response.data\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const deleteAPI = async (ID) => {\r\n    try {\r\n        console.log(ID);\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts/' + ID, {\r\n            method: 'DELETE'\r\n        })\r\n\r\n        return response.data\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n    }\r\n}","import React from 'react';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n\r\n        width: 800,\r\n        margin: 'auto'\r\n    },\r\n});\r\n\r\n\r\nexport function Animations() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n            <Skeleton />\r\n            <Skeleton animation={false} />\r\n            <Skeleton animation=\"wave\" />\r\n            <br />\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\n// import logo from \"./logo.svg\";\r\n// import \"./App.css\";\r\nimport { API, deleteAPI } from './Api'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Animations } from './Skeleton'\r\n\r\nexport function Des() {\r\n\r\n  const [data, setData] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    const fetch = async () => {\r\n      // const data = await API\r\n      setLoading(true)\r\n      setData(await API())\r\n      setLoading(false)\r\n    }\r\n\r\n    fetch()\r\n\r\n  }, [])\r\n\r\n            const handleClick = (e) => {\r\n    console.log(e);\r\n\r\n\r\n  }\r\n  // if (!data) {\r\n  //   return 'loading'\r\n  // }\r\n\r\n  return (\r\n    <div className=\"Des\">\r\n      <h1>Fetching</h1>\r\n      {loading && <Animations />}\r\n      {data.map(d =>\r\n        <Grid container justify=\"center\" spacing={4} key={d.id} >\r\n          <Grid item xs={10} >\r\n            <Paper elevation={3} onClick={() => { handleClick(d.id) }} >\r\n              <Card style={{ minWidth: 400 }}>\r\n                <CardContent>\r\n                  <Typography style={{ fontSize: 14 }} color=\"textSecondary\">\r\n                    {d.id}\r\n                  </Typography>\r\n                  <Typography style={{ fontSize: 14 }} color=\"textSecondary\">\r\n                    {d.title}\r\n                  </Typography>\r\n                  <Typography style={{ fontSize: 14 }} color=\"textSecondary\">\r\n                    {d.body}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport function ButtonAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        News\r\n                      </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import { API } from './component/latihan3/Api'\nimport { Des } from \"./component/latihan3/DEs\";\nimport { ButtonAppBar } from \"./component/latihan3/Navbar\";\nfunction App() {\n\n\n\n\n  return (\n    <div className=\"App\">\n      {/* <h1>Hello world</h1> */}\n      <ButtonAppBar />\n      <Des />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}